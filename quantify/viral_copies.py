__author__ = "Leanne Whitmore"
__email__ = "leanne382@gmail.com"
__description__ = "quantify viral copies"

import glob
import pandas as pd
import extra_functions as ef

def read_FASTA(filename):
    begin = True
    prots = {}
    fil = open(filename, "rt")
    lins = fil.readlines()
    fil.close()
    for lin in lins:
        slin = lin.strip()
        if slin[0] == '>':
            if begin == False:
                prots[pname] = seq
            seq = ""
            pname = slin[1:].strip()
            begin = False
        else:
            seq = seq + slin
    prots[pname] = seq
    return prots

def _generate_viral_gtf(args):
    files_genome = glob.glob(args.path2genome+".fa")
    if len(files_genome) > 1:
        print ("WARNING:  two fasta files in genome folder.")
    
    seq = read_FASTA(files_genome[0])
    if len(seq.keys()) == 1:
        for k, v in seq.items():
            gene_name=k
            length_genome=len(v)
    with open(args.output_path+"/_tmp/viral_copy.gtf", "w") as fin:
        fin.write("#!viral-copy gtf generated by scViralQuant\n")
        fin.write(gene_name+"\t"+"scViralQuant\tgene\t"+str(1)+"\t"+str(length_genome)+"\t.\t+\t.\t"+"gene_id "+"\""+gene_name+"\"; gene version \"2\"; gene_name \""+gene_name+"\"; gene_source \"scViralQuant\"; gene_biotype \"protein_coding\"\n")
        fin.write(gene_name+"\t"+"scViralQuant\ttranscript\t"+str(1)+"\t"+str(length_genome)+"\t.\t+\t.\t"+"gene_id "+"\""+gene_name+"\"; gene version \"2\"; transcript_id \""+gene_name+"_transcript\"; transcript_version \"1\"; gene_name \""+gene_name+"\"; gene_source \"scViralQuant\"; gene_biotype \"protein_coding\"; transcript_name \""+gene_name+"\"; transcript_source \"scViralQuant\"; trnascript_biotype \"protein_coding\"\n")
        fin.write(gene_name+"\t"+"scViralQuant\texon\t"+str(1)+"\t"+str(length_genome)+"\t.\t+\t.\t"+"gene_id "+"\""+gene_name+"\"; gene version \"2\"; transcript_id \""+gene_name+"_transcript\"; transcript_version \"1\"; exon_number \"1\"; gene_name \""+gene_name+"\"; gene_source \"scViralQuant\"; gene_biotype \"protein_coding\"; transcript_name \""+gene_name+"\"; transcript_source \"scViralQuant\"; trnascript_biotype \"protein_coding\"; exon_id \""+gene_name+"_exon\"; exon_version \"1\"\n")
    return(gene_name)

def quantify_reads(output_path,filename, gene_name):

    print ("STATUS: quantifying viral copies ...")
    ## -- get reads mapping to virus
    reads_mapping = set()
    with open(filename, 'r') as fin:
        for line in fin:
            larray = line.strip().split("\t")
            if larray[-1] =="XF:Z:"+gene_name:
                reads_mapping.add(larray[0])

    ## -- get umi and cell barcode information 
    df = pd.read_csv(output_path+"_tmp"+"/barcode_umi_read_table.csv")
    df1 = df[df['read'].isin(reads_mapping)]
    df_reads = df1.groupby(['cell_barcode', 'umi']).count()
    df_umi = df1[["cell_barcode", "umi"]].groupby(["cell_barcode"]).count()  
    df_umi.to_csv(output_path+"viral_copy_counts.csv")
    return(df_umi)

def htseq_run(args):
    ## -- generate gtf for viral copies
    gene_name = _generate_viral_gtf(args)
    arg=["htseq-count", "--format=bam", "--idattr=gene_id", args.output_path+"viral_aligned_sort.bam", args.output_path+"/_tmp/viral_copy.gtf", "--samout="+args.output_path+"viral_aligned_sorted_counts.sam"]
    ef._run_subprocesses(arg, "STATUS: running htseq for viral copies ", "running htseq for viral copies")
    dfumi = quantify_reads(args.output_path, args.output_path+"viral_aligned_sorted_counts.sam", gene_name)
    return dfumi, gene_name
